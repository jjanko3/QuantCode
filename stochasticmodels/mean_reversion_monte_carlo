#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov 19 12:03:56 2018

@author: jj
"""

import numpy as np
import matplotlib.pyplot as plt

class Simulation():
    
    def __init__(self, S0, r, sigma, T):
        self.S0 = S0
        self.r = r
        self.sigma = sigma
        self.T = T
        #I is the number of simulations that should be ran
        self.I = 10000
        #z is the standard normally distributed random variable
        self.z= np.random.standard_normal(self.I)
        
    
    def _ornstein_uhlenbeck(self,a,b):
        n_steps = int(self.T * 252)
        dt = self.T / n_steps
        S = np.zeros((n_steps, self.I))
        S[0] = self.S0
        
        for t in range(1, n_steps):
            # Draw random values to simulate Brownian motion
            Z = np.random.standard_normal(self.I)
            S[t] = a * (b - S[t - 1]) * dt + (self.sigma * Z)
        return S
        
    
        
if __name__ == '__main__':
    #s0 is the initial value
    #r is the constant short rate
    #T is in years
    #sigma is the constant volatility
    sim = Simulation(100,.05, .25, 2.)

    
    S = sim._ornstein_uhlenbeck(.2,80)
    plt.plot(S[:,:10], lw = 1.5)
    plt.xlabel('time')
    plt.ylabel('index level')
    plt.grid(True)
    
        
