#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr  9 15:31:02 2020

@author: janko
"""


import mysql.connector
from mysql.connector import Error
import tweepy
import json
from dateutil import parser
import time
import os
import subprocess
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from sqlalchemy import create_engine
import pandas as pd


class SQLConnection():
    
    def create_database(self, connection, query):
        cursor = connection.cursor()
        try:
            cursor.execute(query)
            print("Database created successfully")
        except Error as e:
            print(f"The error '{e}' occurred")
            
            
    def execute_query(self, connection, query):
        cursor = connection.cursor()
    
        try:
    
            cursor.execute(query)
    
            connection.commit()
    
            print("Query executed successfully")
    
        except Error as e:
    
            print(f"The error '{e}' occurred")
            
    def get_query(self, connection, query):
        cursor = connection.cursor(buffered=True)
    
        try:
    
            cursor.execute(query)
            
            rows = cursor.fetchall()
    
            connection.commit()
    
            print("Query executed successfully")
    
        except Error as e:
    
            print(f"The error '{e}' occurred")
        return rows
    
    
    
    def create_connection(self, host_name, user_name, user_password):
    
        connection = None
    
        try:
    
            connection = mysql.connector.connect(
    
                host=host_name,
    
                user=user_name,
    
                passwd=user_password
    
            )
    
            print("Connection to MySQL DB successful")
    
        except Error as e:
            print(f"The error '{e}' occurred")

        return connection


if __name__ == "__main__":
    
    analyzer = SentimentIntensityAnalyzer()
    #connect_string = 'mysql+pymysql://root:#Otto.1331@localhost/twitter_crypto'
    #sql_engine = create_engine(connect_string)
    #df = pd.read_sql_query(query, sql_engine)
    #sql_engine.close()
    
    stopwords = open("StopWords_Generic.txt","r") 
    stopwordlist = stopwords.readlines()
    stopwords.close()
    stopwordlist_cleaned = []
    for i in stopwordlist:
        stopwordlist_cleaned.append(i.rstrip('\n'))
    
    c = SQLConnection()
    connection = c.create_connection("localhost", "root", "#Otto.1331")
    

    #create_database_query = "CREATE DATABASE twitter_crypto"
    #create_database(connection, create_database_query)
    
    consumer_key = 'O6P1Nj1B1b2GExyeu689rBpMG'
    consumer_secret = 'uvXI3rhopw12VgY7Kzs5Dqly2nerFdnwCMx0jrPNBO4dAaarib'
    access_token = '1248025371783704577-zktFJyreUdyGoirhi17aqDua5PGbgn'
    access_token_secret = '4PkCAsxsYIpEysdMPuK2KQjJmY9marhUjHhxcsZfOTwwK'
    
    
    
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_token, access_token_secret)
    api =tweepy.API(auth, wait_on_rate_limit=True)
    
    
    # 200 tweets to be extracted 
    number_of_tweets=10000
    tweets = api.user_timeline(screen_name='realDonaldTrump') 
  
    # Empty Array 
    tmp=[]  
    scores = []
    
    c.execute_query(connection, 'USE twitter_crypto')
    
    ids = 3
    for tweet in tweets: 
        #make the string lowercase
        cleaned_tweet = tweet.text.lower()
        score =  analyzer.polarity_scores(cleaned_tweet)
        # Appending tweets to the empty array tmp 
        if cleaned_tweet[0:2] != 'rt':
            tmp.append(cleaned_tweet)
            scores.append(score)
            query = ''
            query = "INSERT INTO tweet_table (username,created_at, tweet,negative,neu,pos,compound)"
            #query = query + " VALUES (" +"'"+str(ids)+"'," + "'"+tweet.user.screen_name+"', " +"'"+tweet.created_at.strftime("%m/%d/%Y %H:%M:%S")+"', "+"'"+cleaned_tweet+"', "+"'"+str(scores[0]['neg'])+"', "+"'"+str(scores[0]['neu'])+"', "+"'"+str(scores[0]['pos'])+"', "+"'"+str(scores[0]['compound'])+"'"+ ");"
            query = query + " VALUES (" +"'"+tweet.user.screen_name+"', " +"'"+tweet.created_at.strftime("%m/%d/%Y %H:%M:%S")+"', "+"'"+cleaned_tweet+"', "+"'"+str(scores[0]['neg'])+"', "+"'"+str(scores[0]['neu'])+"', "+"'"+str(scores[0]['pos'])+"', "+"'"+str(scores[0]['compound'])+"'"+ ");"
            c.execute_query(connection, query)
            ids = ids + 1
    """
    connection.close()
        
    c.execute_query(connection,'SELECT LAST_INSERT_ID();') 
    fname = c.fetchone()[0]
    """
    
    connect_string = 'mysql+pymysql://root:#Otto.1331@localhost/twitter_crypto'
    sql_engine = create_engine(connect_string)
    df = pd.read_sql_query("SELECT * FROM tweet_table", sql_engine)
    df = df.drop(labels = 'id', axis = 1)
    df = df.drop_duplicates()